import { DoCheck, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import * as chartJs from 'chart.js';
import { Color } from './color';
import { ThemeService } from './theme.service';
import * as ɵngcc0 from '@angular/core';
export declare type SingleDataSet = (number[] | chartJs.ChartPoint[]);
export declare type MultiDataSet = (number[] | chartJs.ChartPoint[])[];
export declare type SingleOrMultiDataSet = SingleDataSet | MultiDataSet;
export declare type PluginServiceGlobalRegistrationAndOptions = chartJs.PluginServiceGlobalRegistration & chartJs.PluginServiceRegistrationOptions;
export declare type SingleLineLabel = string;
export declare type MultiLineLabel = string[];
export declare type Label = SingleLineLabel | MultiLineLabel;
export declare class BaseChartDirective implements OnDestroy, OnChanges, OnInit, OnDestroy, DoCheck {
    private element;
    private themeService;
    data: SingleOrMultiDataSet;
    datasets: chartJs.ChartDataSets[];
    labels: Label[];
    options: chartJs.ChartOptions;
    chartType: chartJs.ChartType;
    colors: Color[];
    legend: boolean;
    plugins: PluginServiceGlobalRegistrationAndOptions[];
    chartClick: EventEmitter<{
        event?: MouseEvent;
        active?: {}[];
    }>;
    chartHover: EventEmitter<{
        event: MouseEvent;
        active: {}[];
    }>;
    ctx: string;
    chart: Chart;
    private old;
    private subs;
    /**
     * Register a plugin.
     */
    static registerPlugin(plugin: PluginServiceGlobalRegistrationAndOptions): void;
    static unregisterPlugin(plugin: PluginServiceGlobalRegistrationAndOptions): void;
    constructor(element: ElementRef, themeService: ThemeService);
    ngOnInit(): void;
    private themeChanged;
    ngDoCheck(): void;
    copyLabel(a: Label): Label;
    labelsEqual(a: Label, b: Label): boolean;
    copyColor(a: Color): Color;
    colorsEqual(a: Color, b: Color): boolean;
    updateColors(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    update(duration?: any): {};
    hideDataset(index: number, hidden: boolean): void;
    isDatasetHidden(index: number): boolean;
    toBase64Image(): string;
    getChartConfiguration(): chartJs.ChartConfiguration;
    getChartBuilder(ctx: string): Chart;
    smartMerge(options: any, overrides: any, level?: number): any;
    private isMultiLineLabel;
    private joinLabel;
    private propagateDatasetsToData;
    private propagateDataToDatasets;
    private isMultiDataSet;
    private getDatasets;
    private refresh;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BaseChartDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<BaseChartDirective, "canvas[baseChart]", ["base-chart"], {
    "options": "options";
    "data": "data";
    "datasets": "datasets";
    "labels": "labels";
    "chartType": "chartType";
    "colors": "colors";
    "legend": "legend";
    "plugins": "plugins";
}, {
    "chartClick": "chartClick";
    "chartHover": "chartHover";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1jaGFydC5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsiYmFzZS1jaGFydC5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7QUFJQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE0REEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEb0NoZWNrLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBPbkluaXQsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCAqIGFzIGNoYXJ0SnMgZnJvbSAnY2hhcnQuanMnO1xuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuL2NvbG9yJztcbmltcG9ydCB7IFRoZW1lU2VydmljZSB9IGZyb20gJy4vdGhlbWUuc2VydmljZSc7XG5leHBvcnQgZGVjbGFyZSB0eXBlIFNpbmdsZURhdGFTZXQgPSAobnVtYmVyW10gfCBjaGFydEpzLkNoYXJ0UG9pbnRbXSk7XG5leHBvcnQgZGVjbGFyZSB0eXBlIE11bHRpRGF0YVNldCA9IChudW1iZXJbXSB8IGNoYXJ0SnMuQ2hhcnRQb2ludFtdKVtdO1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBTaW5nbGVPck11bHRpRGF0YVNldCA9IFNpbmdsZURhdGFTZXQgfCBNdWx0aURhdGFTZXQ7XG5leHBvcnQgZGVjbGFyZSB0eXBlIFBsdWdpblNlcnZpY2VHbG9iYWxSZWdpc3RyYXRpb25BbmRPcHRpb25zID0gY2hhcnRKcy5QbHVnaW5TZXJ2aWNlR2xvYmFsUmVnaXN0cmF0aW9uICYgY2hhcnRKcy5QbHVnaW5TZXJ2aWNlUmVnaXN0cmF0aW9uT3B0aW9ucztcbmV4cG9ydCBkZWNsYXJlIHR5cGUgU2luZ2xlTGluZUxhYmVsID0gc3RyaW5nO1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBNdWx0aUxpbmVMYWJlbCA9IHN0cmluZ1tdO1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBMYWJlbCA9IFNpbmdsZUxpbmVMYWJlbCB8IE11bHRpTGluZUxhYmVsO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQmFzZUNoYXJ0RGlyZWN0aXZlIGltcGxlbWVudHMgT25EZXN0cm95LCBPbkNoYW5nZXMsIE9uSW5pdCwgT25EZXN0cm95LCBEb0NoZWNrIHtcbiAgICBwcml2YXRlIGVsZW1lbnQ7XG4gICAgcHJpdmF0ZSB0aGVtZVNlcnZpY2U7XG4gICAgZGF0YTogU2luZ2xlT3JNdWx0aURhdGFTZXQ7XG4gICAgZGF0YXNldHM6IGNoYXJ0SnMuQ2hhcnREYXRhU2V0c1tdO1xuICAgIGxhYmVsczogTGFiZWxbXTtcbiAgICBvcHRpb25zOiBjaGFydEpzLkNoYXJ0T3B0aW9ucztcbiAgICBjaGFydFR5cGU6IGNoYXJ0SnMuQ2hhcnRUeXBlO1xuICAgIGNvbG9yczogQ29sb3JbXTtcbiAgICBsZWdlbmQ6IGJvb2xlYW47XG4gICAgcGx1Z2luczogUGx1Z2luU2VydmljZUdsb2JhbFJlZ2lzdHJhdGlvbkFuZE9wdGlvbnNbXTtcbiAgICBjaGFydENsaWNrOiBFdmVudEVtaXR0ZXI8e1xuICAgICAgICBldmVudD86IE1vdXNlRXZlbnQ7XG4gICAgICAgIGFjdGl2ZT86IHt9W107XG4gICAgfT47XG4gICAgY2hhcnRIb3ZlcjogRXZlbnRFbWl0dGVyPHtcbiAgICAgICAgZXZlbnQ6IE1vdXNlRXZlbnQ7XG4gICAgICAgIGFjdGl2ZToge31bXTtcbiAgICB9PjtcbiAgICBjdHg6IHN0cmluZztcbiAgICBjaGFydDogQ2hhcnQ7XG4gICAgcHJpdmF0ZSBvbGQ7XG4gICAgcHJpdmF0ZSBzdWJzO1xuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIGEgcGx1Z2luLlxuICAgICAqL1xuICAgIHN0YXRpYyByZWdpc3RlclBsdWdpbihwbHVnaW46IFBsdWdpblNlcnZpY2VHbG9iYWxSZWdpc3RyYXRpb25BbmRPcHRpb25zKTogdm9pZDtcbiAgICBzdGF0aWMgdW5yZWdpc3RlclBsdWdpbihwbHVnaW46IFBsdWdpblNlcnZpY2VHbG9iYWxSZWdpc3RyYXRpb25BbmRPcHRpb25zKTogdm9pZDtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50OiBFbGVtZW50UmVmLCB0aGVtZVNlcnZpY2U6IFRoZW1lU2VydmljZSk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBwcml2YXRlIHRoZW1lQ2hhbmdlZDtcbiAgICBuZ0RvQ2hlY2soKTogdm9pZDtcbiAgICBjb3B5TGFiZWwoYTogTGFiZWwpOiBMYWJlbDtcbiAgICBsYWJlbHNFcXVhbChhOiBMYWJlbCwgYjogTGFiZWwpOiBib29sZWFuO1xuICAgIGNvcHlDb2xvcihhOiBDb2xvcik6IENvbG9yO1xuICAgIGNvbG9yc0VxdWFsKGE6IENvbG9yLCBiOiBDb2xvcik6IGJvb2xlYW47XG4gICAgdXBkYXRlQ29sb3JzKCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICB1cGRhdGUoZHVyYXRpb24/OiBhbnkpOiB7fTtcbiAgICBoaWRlRGF0YXNldChpbmRleDogbnVtYmVyLCBoaWRkZW46IGJvb2xlYW4pOiB2b2lkO1xuICAgIGlzRGF0YXNldEhpZGRlbihpbmRleDogbnVtYmVyKTogYm9vbGVhbjtcbiAgICB0b0Jhc2U2NEltYWdlKCk6IHN0cmluZztcbiAgICBnZXRDaGFydENvbmZpZ3VyYXRpb24oKTogY2hhcnRKcy5DaGFydENvbmZpZ3VyYXRpb247XG4gICAgZ2V0Q2hhcnRCdWlsZGVyKGN0eDogc3RyaW5nKTogQ2hhcnQ7XG4gICAgc21hcnRNZXJnZShvcHRpb25zOiBhbnksIG92ZXJyaWRlczogYW55LCBsZXZlbD86IG51bWJlcik6IGFueTtcbiAgICBwcml2YXRlIGlzTXVsdGlMaW5lTGFiZWw7XG4gICAgcHJpdmF0ZSBqb2luTGFiZWw7XG4gICAgcHJpdmF0ZSBwcm9wYWdhdGVEYXRhc2V0c1RvRGF0YTtcbiAgICBwcml2YXRlIHByb3BhZ2F0ZURhdGFUb0RhdGFzZXRzO1xuICAgIHByaXZhdGUgaXNNdWx0aURhdGFTZXQ7XG4gICAgcHJpdmF0ZSBnZXREYXRhc2V0cztcbiAgICBwcml2YXRlIHJlZnJlc2g7XG59XG4iXX0=