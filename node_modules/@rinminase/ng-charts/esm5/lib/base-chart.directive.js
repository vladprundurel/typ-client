import { __assign, __decorate, __read, __spread } from "tslib";
import { Directive, DoCheck, ElementRef, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChanges, } from '@angular/core';
import * as chartJs from 'chart.js';
import { getColors } from './get-colors';
import { ThemeService } from './theme.service';
import { cloneDeep } from 'lodash-es';
var UpdateType;
(function (UpdateType) {
    UpdateType[UpdateType["Default"] = 0] = "Default";
    UpdateType[UpdateType["Update"] = 1] = "Update";
    UpdateType[UpdateType["Refresh"] = 2] = "Refresh";
})(UpdateType || (UpdateType = {}));
var BaseChartDirective = /** @class */ (function () {
    function BaseChartDirective(element, themeService) {
        this.element = element;
        this.themeService = themeService;
        this.options = {};
        this.chartClick = new EventEmitter();
        this.chartHover = new EventEmitter();
        this.old = {
            dataExists: false,
            dataLength: 0,
            datasetsExists: false,
            datasetsLength: 0,
            datasetsDataObjects: [],
            datasetsDataLengths: [],
            colorsExists: false,
            colors: [],
            labelsExist: false,
            labels: [],
            legendExists: false,
            legend: {},
        };
        this.subs = [];
    }
    /**
     * Register a plugin.
     */
    BaseChartDirective.registerPlugin = function (plugin) {
        chartJs.Chart.plugins.register(plugin);
    };
    BaseChartDirective.unregisterPlugin = function (plugin) {
        chartJs.Chart.plugins.unregister(plugin);
    };
    BaseChartDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.ctx = this.element.nativeElement.getContext('2d');
        this.refresh();
        this.subs.push(this.themeService.colorschemesOptions.subscribe(function () { return _this.themeChanged(); }));
    };
    BaseChartDirective.prototype.themeChanged = function () {
        this.refresh();
    };
    BaseChartDirective.prototype.ngDoCheck = function () {
        var _this = this;
        if (!this.chart) {
            return;
        }
        var updateRequired = UpdateType.Default;
        var wantUpdate = function (x) {
            updateRequired = x > updateRequired ? x : updateRequired;
        };
        if (!!this.data !== this.old.dataExists) {
            this.propagateDataToDatasets(this.data);
            this.old.dataExists = !!this.data;
            wantUpdate(UpdateType.Update);
        }
        if (this.data && this.data.length !== this.old.dataLength) {
            this.old.dataLength = this.data && this.data.length || 0;
            wantUpdate(UpdateType.Update);
        }
        if (!!this.datasets !== this.old.datasetsExists) {
            this.old.datasetsExists = !!this.datasets;
            wantUpdate(UpdateType.Update);
        }
        if (this.datasets && this.datasets.length !== this.old.datasetsLength) {
            this.old.datasetsLength = this.datasets && this.datasets.length || 0;
            wantUpdate(UpdateType.Update);
        }
        if (this.datasets && this.datasets.filter(function (x, i) { return x.data !== _this.old.datasetsDataObjects[i]; }).length) {
            this.old.datasetsDataObjects = this.datasets.map(function (x) { return x.data; });
            wantUpdate(UpdateType.Update);
        }
        if (this.datasets && this.datasets.filter(function (x, i) { return x.data.length !== _this.old.datasetsDataLengths[i]; }).length) {
            this.old.datasetsDataLengths = this.datasets.map(function (x) { return x.data.length; });
            wantUpdate(UpdateType.Update);
        }
        if (!!this.colors !== this.old.colorsExists) {
            this.old.colorsExists = !!this.colors;
            this.updateColors();
            wantUpdate(UpdateType.Update);
        }
        // This smells of inefficiency, might need to revisit this
        if (this.colors && this.colors.filter(function (x, i) { return !_this.colorsEqual(x, _this.old.colors[i]); }).length) {
            this.old.colors = this.colors.map(function (x) { return _this.copyColor(x); });
            this.updateColors();
            wantUpdate(UpdateType.Update);
        }
        if (!!this.labels !== this.old.labelsExist) {
            this.old.labelsExist = !!this.labels;
            wantUpdate(UpdateType.Update);
        }
        if (this.labels && this.labels.filter(function (x, i) { return !_this.labelsEqual(x, _this.old.labels[i]); }).length) {
            this.old.labels = this.labels.map(function (x) { return _this.copyLabel(x); });
            wantUpdate(UpdateType.Update);
        }
        if (!!this.options.legend !== this.old.legendExists) {
            this.old.legendExists = !!this.options.legend;
            wantUpdate(UpdateType.Refresh);
        }
        if (this.options.legend && this.options.legend.position !== this.old.legend.position) {
            this.old.legend.position = this.options.legend.position;
            wantUpdate(UpdateType.Refresh);
        }
        switch (updateRequired) {
            case UpdateType.Default:
                break;
            case UpdateType.Update:
                this.update();
                break;
            case UpdateType.Refresh:
                this.refresh();
                break;
        }
    };
    BaseChartDirective.prototype.copyLabel = function (a) {
        if (Array.isArray(a)) {
            return __spread(a);
        }
        return a;
    };
    BaseChartDirective.prototype.labelsEqual = function (a, b) {
        return true
            && Array.isArray(a) === Array.isArray(b)
            && (Array.isArray(a) || a === b)
            && (!Array.isArray(a) || a.length === b.length)
            && (!Array.isArray(a) || a.filter(function (x, i) { return x !== b[i]; }).length === 0);
    };
    BaseChartDirective.prototype.copyColor = function (a) {
        var rc = {
            backgroundColor: a.backgroundColor,
            borderWidth: a.borderWidth,
            borderColor: a.borderColor,
            borderCapStyle: a.borderCapStyle,
            borderDash: a.borderDash,
            borderDashOffset: a.borderDashOffset,
            borderJoinStyle: a.borderJoinStyle,
            pointBorderColor: a.pointBorderColor,
            pointBackgroundColor: a.pointBackgroundColor,
            pointBorderWidth: a.pointBorderWidth,
            pointRadius: a.pointRadius,
            pointHoverRadius: a.pointHoverRadius,
            pointHitRadius: a.pointHitRadius,
            pointHoverBackgroundColor: a.pointHoverBackgroundColor,
            pointHoverBorderColor: a.pointHoverBorderColor,
            pointHoverBorderWidth: a.pointHoverBorderWidth,
            pointStyle: a.pointStyle,
            hoverBackgroundColor: a.hoverBackgroundColor,
            hoverBorderColor: a.hoverBorderColor,
            hoverBorderWidth: a.hoverBorderWidth,
        };
        return rc;
    };
    BaseChartDirective.prototype.colorsEqual = function (a, b) {
        if (!a !== !b) {
            return false;
        }
        return !a || true
            && (a.backgroundColor === b.backgroundColor)
            && (a.borderWidth === b.borderWidth)
            && (a.borderColor === b.borderColor)
            && (a.borderCapStyle === b.borderCapStyle)
            && (a.borderDash === b.borderDash)
            && (a.borderDashOffset === b.borderDashOffset)
            && (a.borderJoinStyle === b.borderJoinStyle)
            && (a.pointBorderColor === b.pointBorderColor)
            && (a.pointBackgroundColor === b.pointBackgroundColor)
            && (a.pointBorderWidth === b.pointBorderWidth)
            && (a.pointRadius === b.pointRadius)
            && (a.pointHoverRadius === b.pointHoverRadius)
            && (a.pointHitRadius === b.pointHitRadius)
            && (a.pointHoverBackgroundColor === b.pointHoverBackgroundColor)
            && (a.pointHoverBorderColor === b.pointHoverBorderColor)
            && (a.pointHoverBorderWidth === b.pointHoverBorderWidth)
            && (a.pointStyle === b.pointStyle)
            && (a.hoverBackgroundColor === b.hoverBackgroundColor)
            && (a.hoverBorderColor === b.hoverBorderColor)
            && (a.hoverBorderWidth === b.hoverBorderWidth);
    };
    BaseChartDirective.prototype.updateColors = function () {
        var _this = this;
        this.datasets.forEach(function (elm, index) {
            if (_this.colors && _this.colors[index]) {
                Object.assign(elm, _this.colors[index]);
            }
            else {
                Object.assign(elm, getColors(_this.chartType, index, elm.data.length), __assign({}, elm));
            }
        });
    };
    BaseChartDirective.prototype.ngOnChanges = function (changes) {
        var updateRequired = UpdateType.Default;
        var wantUpdate = function (x) {
            updateRequired = x > updateRequired ? x : updateRequired;
        };
        // Check if the changes are in the data or datasets or labels or legend
        if (changes.hasOwnProperty('data') && changes.data.currentValue) {
            this.propagateDataToDatasets(changes.data.currentValue);
            wantUpdate(UpdateType.Update);
        }
        if (changes.hasOwnProperty('datasets') && changes.datasets.currentValue) {
            this.propagateDatasetsToData(changes.datasets.currentValue);
            wantUpdate(UpdateType.Update);
        }
        if (changes.hasOwnProperty('labels')) {
            if (this.chart) {
                this.chart.data.labels = changes.labels.currentValue;
            }
            wantUpdate(UpdateType.Update);
        }
        if (changes.hasOwnProperty('legend')) {
            if (this.chart) {
                this.chart.config.options.legend.display = changes.legend.currentValue;
                this.chart.generateLegend();
            }
            wantUpdate(UpdateType.Update);
        }
        if (changes.hasOwnProperty('options')) {
            wantUpdate(UpdateType.Refresh);
        }
        switch (updateRequired) {
            case UpdateType.Update:
                this.update();
                break;
            case UpdateType.Refresh:
            case UpdateType.Default:
                this.refresh();
                break;
        }
    };
    BaseChartDirective.prototype.ngOnDestroy = function () {
        if (this.chart) {
            this.chart.destroy();
            this.chart = void 0;
        }
        this.subs.forEach(function (x) { return x.unsubscribe(); });
    };
    BaseChartDirective.prototype.update = function (duration) {
        if (this.chart) {
            return this.chart.update(duration);
        }
    };
    BaseChartDirective.prototype.hideDataset = function (index, hidden) {
        this.chart.getDatasetMeta(index).hidden = hidden;
        this.chart.update();
    };
    BaseChartDirective.prototype.isDatasetHidden = function (index) {
        return this.chart.getDatasetMeta(index).hidden;
    };
    BaseChartDirective.prototype.toBase64Image = function () {
        return this.chart.toBase64Image();
    };
    BaseChartDirective.prototype.getChartConfiguration = function () {
        var _this = this;
        var datasets = this.getDatasets();
        var options = Object.assign({}, this.options);
        if (this.legend === false) {
            options.legend = { display: false };
        }
        // hook for onHover and onClick events
        options.hover = options.hover || {};
        if (!options.hover.onHover) {
            options.hover.onHover = function (event, active) {
                if (active && !active.length) {
                    return;
                }
                _this.chartHover.emit({ event: event, active: active });
            };
        }
        if (!options.onClick) {
            options.onClick = function (event, active) {
                _this.chartClick.emit({ event: event, active: active });
            };
        }
        var mergedOptions = this.smartMerge(options, this.themeService.getColorschemesOptions());
        var chartConfig = {
            type: this.chartType,
            data: {
                labels: this.labels || [],
                datasets: datasets
            },
            plugins: this.plugins,
            options: mergedOptions,
        };
        return chartConfig;
    };
    BaseChartDirective.prototype.getChartBuilder = function (ctx /*, data:any[], options:any*/) {
        var chartConfig = this.getChartConfiguration();
        return new chartJs.Chart(ctx, chartConfig);
    };
    BaseChartDirective.prototype.smartMerge = function (options, overrides, level) {
        var _this = this;
        if (level === void 0) { level = 0; }
        if (level === 0) {
            options = cloneDeep(options);
        }
        var keysToUpdate = Object.keys(overrides);
        keysToUpdate.forEach(function (key) {
            if (Array.isArray(overrides[key])) {
                var arrayElements = options[key];
                if (arrayElements) {
                    arrayElements.forEach(function (r) {
                        _this.smartMerge(r, overrides[key][0], level + 1);
                    });
                }
            }
            else if (typeof (overrides[key]) === 'object') {
                if (!(key in options)) {
                    options[key] = {};
                }
                _this.smartMerge(options[key], overrides[key], level + 1);
            }
            else {
                options[key] = overrides[key];
            }
        });
        if (level === 0) {
            return options;
        }
    };
    BaseChartDirective.prototype.isMultiLineLabel = function (label) {
        return Array.isArray(label);
    };
    BaseChartDirective.prototype.joinLabel = function (label) {
        if (!label) {
            return null;
        }
        if (this.isMultiLineLabel(label)) {
            return label.join(' ');
        }
        else {
            return label;
        }
    };
    BaseChartDirective.prototype.propagateDatasetsToData = function (datasets) {
        this.data = this.datasets.map(function (r) { return r.data; });
        if (this.chart) {
            this.chart.data.datasets = datasets;
        }
        this.updateColors();
    };
    BaseChartDirective.prototype.propagateDataToDatasets = function (newDataValues) {
        var _this = this;
        if (this.isMultiDataSet(newDataValues)) {
            if (this.datasets && newDataValues.length === this.datasets.length) {
                this.datasets.forEach(function (dataset, i) {
                    dataset.data = newDataValues[i];
                });
            }
            else {
                this.datasets = newDataValues.map(function (data, index) {
                    return { data: data, label: _this.joinLabel(_this.labels[index]) || "Label " + index };
                });
                if (this.chart) {
                    this.chart.data.datasets = this.datasets;
                }
            }
        }
        else {
            if (!this.datasets) {
                this.datasets = [{ data: newDataValues }];
                if (this.chart) {
                    this.chart.data.datasets = this.datasets;
                }
            }
            else {
                this.datasets[0].data = newDataValues;
                this.datasets.splice(1); // Remove all elements but the first
            }
        }
        this.updateColors();
    };
    BaseChartDirective.prototype.isMultiDataSet = function (data) {
        return Array.isArray(data[0]);
    };
    BaseChartDirective.prototype.getDatasets = function () {
        if (!this.datasets && !this.data) {
            throw new Error("ng-charts configuration error, data or datasets field are required to render chart " + this.chartType);
        }
        // If `datasets` is defined, use it over the `data` property.
        if (this.datasets) {
            this.propagateDatasetsToData(this.datasets);
            return this.datasets;
        }
        if (this.data) {
            this.propagateDataToDatasets(this.data);
            return this.datasets;
        }
    };
    BaseChartDirective.prototype.refresh = function () {
        // if (this.options && this.options.responsive) {
        //   setTimeout(() => this.refresh(), 50);
        // }
        // todo: remove this line, it is producing flickering
        if (this.chart) {
            this.chart.destroy();
            this.chart = void 0;
        }
        if (this.ctx) {
            this.chart = this.getChartBuilder(this.ctx /*, data, this.options*/);
        }
    };
    BaseChartDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ThemeService }
    ]; };
    __decorate([
        Input()
    ], BaseChartDirective.prototype, "data", void 0);
    __decorate([
        Input()
    ], BaseChartDirective.prototype, "datasets", void 0);
    __decorate([
        Input()
    ], BaseChartDirective.prototype, "labels", void 0);
    __decorate([
        Input()
    ], BaseChartDirective.prototype, "options", void 0);
    __decorate([
        Input()
    ], BaseChartDirective.prototype, "chartType", void 0);
    __decorate([
        Input()
    ], BaseChartDirective.prototype, "colors", void 0);
    __decorate([
        Input()
    ], BaseChartDirective.prototype, "legend", void 0);
    __decorate([
        Input()
    ], BaseChartDirective.prototype, "plugins", void 0);
    __decorate([
        Output()
    ], BaseChartDirective.prototype, "chartClick", void 0);
    __decorate([
        Output()
    ], BaseChartDirective.prototype, "chartHover", void 0);
    BaseChartDirective = __decorate([
        Directive({
            // tslint:disable-next-line:directive-selector
            selector: 'canvas[baseChart]',
            exportAs: 'base-chart'
        })
    ], BaseChartDirective);
    return BaseChartDirective;
}());
export { BaseChartDirective };
//# sourceMappingURL=data:application/json;base64,