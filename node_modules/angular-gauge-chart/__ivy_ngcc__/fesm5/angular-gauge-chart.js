import { Component, ViewChild, Input, NgModule } from '@angular/core';
import { gaugeChart } from 'gauge-chart';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * GaugeChart Component
 */
import * as ɵngcc0 from '@angular/core';

var _c0 = ["gaugeArea"];
var GaugeChartComponent = /** @class */ (function () {
    function GaugeChartComponent() {
    }
    /**
     * @return {?}
     */
    GaugeChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // calculate styles for name and bottomLabel
        if (this.name) {
            if (!this.nameFont) {
                this.nameFont = '' + Math.round(this.canvasWidth / 15);
            }
            this.nameMargin = '' + Math.round(+this.nameFont / 4);
        }
        if (this.bottomLabel) {
            if (!this.bottomLabelFont) {
                this.bottomLabelFont = '' + Math.round(this.canvasWidth / 10);
            }
            this.bottomLabelMargin = '-' + this.bottomLabelFont;
        }
        if (this.optionsCheck()) {
            this.element = this.gaugeArea.nativeElement;
            this.drawChart();
        }
        this.oldOptions = JSON.parse(JSON.stringify(this.options));
    };
    /**
     * @return {?}
     */
    GaugeChartComponent.prototype.optionsCheck = /**
     * @return {?}
     */
    function () {
        if (this.canvasWidth == null) {
            console.warn('gauge-chart warning: canvasWidth is not specified!');
            return false;
        }
        else if (this.needleValue == null) {
            console.warn('gauge-chart warning: needleValue is not specified!');
            return false;
        }
        if (this.centralLabel == null) {
            this.centralLabel = '';
        }
        return true;
    };
    /**
     * @return {?}
     */
    GaugeChartComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        if (!this.areEqual(this.options, this.oldOptions)) {
            this.drawChart(true);
            this.oldOptions = JSON.parse(JSON.stringify(this.options));
        }
    };
    /**
     * @param {?} obj1
     * @param {?} obj2
     * @return {?}
     */
    GaugeChartComponent.prototype.areEqual = /**
     * @param {?} obj1
     * @param {?} obj2
     * @return {?}
     */
    function (obj1, obj2) {
        return JSON.stringify(obj1) === JSON.stringify(obj2);
    };
    /**
     * @param {?=} redraw
     * @return {?}
     */
    GaugeChartComponent.prototype.drawChart = /**
     * @param {?=} redraw
     * @return {?}
     */
    function (redraw) {
        if (redraw === void 0) { redraw = false; }
        if (redraw) {
            this.gaugeChart.removeGauge();
        }
        this.options.centralLabel = this.centralLabel;
        this.gaugeChart = gaugeChart(this.element, this.canvasWidth, this.options);
        this.gaugeChart.updateNeedle(this.needleValue);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    GaugeChartComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.needleValue && !changes.needleValue.firstChange) {
            this.needleValue = changes.needleValue.currentValue;
            this.gaugeChart.updateNeedle(this.needleValue);
        }
        if (changes.centralLabel && !changes.centralLabel.firstChange) {
            this.centralLabel = changes.centralLabel.currentValue;
            this.drawChart(true);
        }
    };
    GaugeChartComponent.propDecorators = {
        gaugeArea: [{ type: ViewChild, args: ['gaugeArea', { static: true },] }],
        canvasWidth: [{ type: Input }],
        needleValue: [{ type: Input }],
        centralLabel: [{ type: Input }],
        options: [{ type: Input }],
        wrapOptions: [{ type: Input }],
        name: [{ type: Input }],
        nameFont: [{ type: Input }],
        bottomLabel: [{ type: Input }],
        bottomLabelFont: [{ type: Input }]
    };
GaugeChartComponent.ɵfac = function GaugeChartComponent_Factory(t) { return new (t || GaugeChartComponent)(); };
GaugeChartComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: GaugeChartComponent, selectors: [["rg-gauge-chart"]], viewQuery: function GaugeChartComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.gaugeArea = _t.first);
    } }, inputs: { nameFont: "nameFont", bottomLabelFont: "bottomLabelFont", centralLabel: "centralLabel", needleValue: "needleValue", canvasWidth: "canvasWidth", options: "options", wrapOptions: "wrapOptions", name: "name", bottomLabel: "bottomLabel" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 7, vars: 12, consts: [[1, "gauge-chart"], ["gaugeArea", ""], [1, "gauge-chart__label"]], template: function GaugeChartComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "span");
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(3, "div", null, 1);
        ɵngcc0.ɵɵelementStart(5, "span", 2);
        ɵngcc0.ɵɵtext(6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵstyleProp("width", ctx.canvasWidth, "px");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleProp("font-size", ctx.nameFont, "px")("margin-bottom", ctx.nameMargin, "px");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.name, " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵstyleProp("font-size", ctx.bottomLabelFont, "px")("margin-top", ctx.bottomLabelMargin, "px");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.bottomLabel, " ");
    } }, styles: ["*[_ngcontent-%COMP%]{font-family:Roboto,'Helvetica Neue',sans-serif}.gauge-chart[_ngcontent-%COMP%]{display:flex;flex-direction:column;text-align:center}.gauge-chart__label[_ngcontent-%COMP%]{font-weight:700}"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GaugeChartComponent, [{
        type: Component,
        args: [{
                selector: 'rg-gauge-chart',
                template: "<div class=\"gauge-chart\" [style.width.px]=\"canvasWidth\">\n  <span\n    [style.font-size.px]=\"nameFont\"\n    [style.margin-bottom.px]=\"nameMargin\">\n    {{name}}\n  </span>\n  <div #gaugeArea></div>\n  <span\n    class=\"gauge-chart__label\"\n    [style.font-size.px]=\"bottomLabelFont\"\n    [style.margin-top.px]=\"bottomLabelMargin\">\n    {{bottomLabel}}\n  </span>\n</div>\n",
                styles: ["*{font-family:Roboto,'Helvetica Neue',sans-serif}.gauge-chart{display:flex;flex-direction:column;text-align:center}.gauge-chart__label{font-weight:700}"]
            }]
    }], function () { return []; }, { nameFont: [{
            type: Input
        }], bottomLabelFont: [{
            type: Input
        }], centralLabel: [{
            type: Input
        }], needleValue: [{
            type: Input
        }], gaugeArea: [{
            type: ViewChild,
            args: ['gaugeArea', { static: true }]
        }], canvasWidth: [{
            type: Input
        }], options: [{
            type: Input
        }], wrapOptions: [{
            type: Input
        }], name: [{
            type: Input
        }], bottomLabel: [{
            type: Input
        }] }); })();
    return GaugeChartComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var GaugeChartModule = /** @class */ (function () {
    function GaugeChartModule() {
    }
GaugeChartModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: GaugeChartModule });
GaugeChartModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function GaugeChartModule_Factory(t) { return new (t || GaugeChartModule)(); }, imports: [[]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(GaugeChartModule, { declarations: [GaugeChartComponent], exports: [GaugeChartComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GaugeChartModule, [{
        type: NgModule,
        args: [{
                imports: [],
                declarations: [GaugeChartComponent],
                exports: [GaugeChartComponent]
            }]
    }], function () { return []; }, null); })();
    return GaugeChartModule;
}());

export { GaugeChartComponent, GaugeChartModule };

//# sourceMappingURL=angular-gauge-chart.js.map